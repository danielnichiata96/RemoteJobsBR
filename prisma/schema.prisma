generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String
  normalizedCompanyName String?           @db.Text
  password           String?
  image              String?
  role               UserRole
  emailVerified      DateTime?
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  title              String?
  bio                String?
  location           String?
  phone              String?
  resumeUrl          String?
  linkedinUrl        String?
  githubUrl          String?
  portfolioUrl       String?
  desiredSalary      Float?
  availableForWork   Boolean              @default(true)
  preferredWorkTypes String[]             @default([])
  preferredLocations String[]             @default([])
  yearsOfExperience  Int?
  experienceLevel    ExperienceLevel?
  skills             String[]             @default([])
  languages          Json[]               @default([])
  description        String?
  industry           String?
  website            String?
  logo               String?
  size               String?
  foundedYear        Int?
  contactName        String?
  contactEmail       String?
  contactPhone       String?
  twitterUrl         String?
  isVerified         Boolean              @default(false)
  subscriptionTier   String?
  subscriptionEndsAt DateTime?
  accounts           Account[]
  jobs               Job[]                @relation("CompanyJobs")
  newsletter         Newsletter?
  resetTokens        PasswordResetToken[]
  savedJobs          SavedJob[]
  sessions           Session[]
  @@index([normalizedCompanyName])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Job {
  id               String          @id @default(cuid())
  source           String          @default("direct")  // "direct", "greenhouse", "linkedin", etc.
  sourceId         String?         // Original ID from the source
  sourceLogo       String?         // Logo URL from the source
  sourceUrl        String?         // Original job URL
  companyId        String
  title            String
  normalizedTitle  String?         @db.Text
  description      String?         @db.Text
  requirements     String?         @db.Text
  responsibilities String?
  benefits         String?         @db.Text
  jobType          JobType?
  experienceLevel  ExperienceLevel?
  skills           String[]        @default([])
  tags             String[]        @default([])
  location         String?
  country          String?
  workplaceType    String          @default("REMOTE")
  minSalary        Float?
  maxSalary        Float?
  hiringRegion     HiringRegion?   // Add hiring region filter
  currency         String?         @default("BRL")
  salaryCycle      String?
  showSalary       Boolean         @default(false)
  status           JobStatus       @default(ACTIVE)
  visas            String[]
  languages        String[]
  applicationUrl   String?
  applicationEmail String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  publishedAt      DateTime?
  expiresAt        DateTime?
  viewCount        Int             @default(0)
  clickCount       Int             @default(0)
  company          User            @relation("CompanyJobs", fields: [companyId], references: [id])
  savedBy          SavedJob[]
  technologies     Technology[]
  greenhouseId     String?         @unique

  @@unique([source, sourceId])
  @@index([publishedAt])
  @@index([companyId])
  @@index([companyId, normalizedTitle, status])
}

model SavedJob {
  id          String   @id @default(cuid())
  jobId       String
  candidateId String
  createdAt   DateTime @default(now())
  candidate   User     @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([candidateId, jobId])
}

model Newsletter {
  id               String    @id @default(cuid())
  email            String    @unique
  firstName        String?
  jobTypes         String[]  @default([])
  experienceLevels String[]  @default([])
  skills           String[]  @default([])
  frequency        String?
  isActive         Boolean   @default(true)
  confirmedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastSentAt       DateTime?
  candidateId      String?   @unique
  candidate        User?     @relation(fields: [candidateId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobSource {
  id            String   @id @default(cuid())
  name          String   // Company Name (e.g., "Stripe")
  type          String   @default("greenhouse") // Source type (e.g., "greenhouse", "lever")
  companyWebsite String?  // Add company website URL
  isEnabled     Boolean  @default(true)
  // url           String? // Original job board URL (Optional, maybe less useful now)
  logoUrl       String?  // Potentially useful for direct logo override?
  // apiKey        String? // Not typically needed for Greenhouse GET
  // apiEndpoint   String? // Base endpoint might be useful for other sources
  config        Json     @default("{}") // Store specific config like boardToken
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastFetched   DateTime?
  runStats      JobSourceRunStats[] // Add relation to run stats

  @@unique([name, type])
}

model Technology {
  id    String @id @default(cuid())
  name  String @unique // Ensure technology names are unique

  // Relation to Jobs (Many-to-Many)
  jobs  Job[]

  @@index([name]) // Index for faster lookups by name
}

model JobSourceRunStats {
  id            String   @id @default(cuid())
  jobSourceId   String
  runStartedAt  DateTime @default(now())
  runEndedAt    DateTime @updatedAt // Or set manually at end of run
  status        String   // e.g., "SUCCESS", "FAILURE", "PARTIAL_SUCCESS"
  jobsFound     Int      @default(0) // Total jobs returned by source API
  jobsRelevant  Int      @default(0) // Jobs passing initial filter (_isJobRelevant)
  jobsProcessed Int      @default(0) // Jobs successfully saved/updated
  jobsErrored   Int      @default(0) // Jobs that failed during processing/saving
  errorMessage  String?  @db.Text // Store first/last error message if status is FAILURE (use Text for potentially long messages)
  durationMs    Int?     // Duration of the fetch + process cycle in milliseconds

  jobSource     JobSource @relation(fields: [jobSourceId], references: [id], onDelete: Cascade) // Link back to JobSource

  @@index([jobSourceId, runStartedAt])
}

// --- Enums ---

enum UserRole {
  CANDIDATE
  COMPANY
  ADMIN
}

enum ExperienceLevel {
  ENTRY
  MID
  SENIOR
  LEAD
  UNKNOWN
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
  UNKNOWN
}

enum JobStatus {
  DRAFT
  ACTIVE
  PAUSED
  CLOSED
}

enum Currency {
  USD
  EUR
  GBP
  BRL
  CAD
  AUD
}

enum HiringRegion {
  WORLDWIDE
  LATAM
  BRAZIL
}

// --- Enums ---
